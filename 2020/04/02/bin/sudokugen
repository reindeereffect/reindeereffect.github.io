#! /usr/bin/env python3
# [[file:~/dev/re/2020/04/02/index.org::bin/sudokugen][bin/sudokugen]]
'''
Usage: %s [-o ORDER] [-g MAXGUESSES] [-m]
Generate a Sudoku puzzle.

Options:
  -h, --help    print this help and exit

  -g MAXGUESSES
                when testing potential clues, restrict solver to a depth of 
                MAXGUESSES

  -m            only remove cells that can be deduced or have that might be
                among the best candidates

If the computed puzzle is not proper (i.e., has exactly one solution), exits 
with nonzero status.
'''
import getopt
from math import inf
import sudoku as sd
def main(argv):
    opts_, args = getopt.gnu_getopt(argv, 'g:mo:')
    opts = dict(opts_)

    order = int(opts.get('-o', 3))
    maxguesses = int(opts['-g']) if '-g' in opts else inf
    minbranch = '-m' in opts
    soln = next(sd.solve(sd.blank(order)))
    bd, difficulty = sd.generate_from(soln,
                                      minbranch=minbranch,
                                      maxguesses=maxguesses)
    proper = sd.isproper(bd)

    print('difficulty:', difficulty)
    print('proper:', proper)
    print()
    print(sd.dump_board(bd))
    print()
    print('> ' + sd.dump_board(soln).replace('\n', '\n> '))

    if not proper: exit(1)
import sys

def usage():
    return __doc__.lstrip() % sys.argv[0]

if __name__ == '__main__':
    if set(sys.argv) & {'-h', '--help'}:
        sys.exit(usage())
    else:
        main(sys.argv[1:])
# bin/sudokugen ends here
