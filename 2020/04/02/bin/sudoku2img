#! /bin/bash
function pipetex() {
    d=`mktemp -d`
    pushd $d >/dev/null
    {
        cat <<'EOF' > sudokuii.sty
 \NeedsTeXFormat{LaTeX2e}[1999/12/01]
 \ProvidesPackage{sudokuii}[2020/04/18 Big Sudoku]
 
 \RequirePackage{sudoku}
 \RequirePackage{fp}
 
 \renewenvironment{sudoku}[1][3]{
   \newcount\order
   \order = #1
   \newcount\n
   \n = \numexpr(#1*#1)
   \FPeval{\sudodelta}{1/#1/#1}
 
   \renewenvironment{sudoku-block}{
     \catcode`\|=\active
     \@sudoku@activate
     \setcounter{@sudoku@col}{-1}
     \setcounter{@sudoku@row}{\numexpr(\n-1)}
     \setlength\unitlength{\sudodelta\sudokusize}
     \begin{picture}(\n,\n)
       \@sudoku@grid\@sudoku@grab@arguments
   }{
     \end{picture}
   }
 
   \renewcommand*\@sudoku@grid{
     \linethickness{\sudokuthinline}
     \multiput(0,0)(1,0){\numexpr(\n+1)}{\line(0,1){\n}}
     \multiput(0,0)(0,1){\numexpr(\n+1)}{\line(1,0){\n}}
     \linethickness{\sudokuthickline}
     \multiput(0,0)(\order,0){\numexpr(\order+1)}{\line(0,1){\n}}
     \multiput(0,0)(0,\order){\numexpr(\order+1)}{\line(1,0){\n}}
     \linethickness{0.5\sudokuthickline}
     \put(0,0){\framebox(0,0){}}
     \put(\n,0){\framebox(0,0){}}
     \put(0,\n){\framebox(0,0){}}
     \put(\n,\n){\framebox(0,0){}}}
 
   \begin{center}
     \begin{sudoku-block}
 }{
     \end{sudoku-block}
   \end{center}
 }
 
 
 \def\@sudoku@grab@arguments#1.{
   \scantokens{#1.}}
 
 \endinput
EOF
        pdflatex --jobname tmp >/dev/null
        [[ -f tmp.pdf ]] && cat tmp.pdf
    }
    popd > /dev/null
    rm -rf $d
}


function topng() { convert - -trim -transparent white -colorspace RGB png:-; }

function tex2png() {
    cat <<EOF | pipetex | topng
\documentclass[border=2pt,varwidth=\maxdimen]{standalone}
\usepackage{graphics}
\usepackage{sudokuii}
\usepackage{xcolor}
\usepackage{tcolorbox}

\begin{document}
\begin{varwidth}{\linewidth}
\huge
$(cat)
\end{varwidth}
\end{document}
EOF
}


function convert_puzzle() {
    infile=$1
    outd=$2
    shift 2

    mkdir -p $outd
    grep difficulty $infile > $outd/meta.txt
    grep    \> $infile | sudoku2tex "$@"    | tex2png > $outd/solved.png
    grep -v \> $infile | sudoku2tex "$@"    | tex2png > $outd/new.png
    grep -v \> $infile | sudoku2tex -p "$@" | tex2png > $outd/penciled.png
}

function convert_board() {
    sudoku2tex "$@" | tex2png
}


function usage() {
    cat <<EOF
Usage: `basename $0` [OPTIONS]
Generate images from Sudoku boards or puzzles (i.e., paired boards and
solutions, as produced by sudokugen).

Options
  -h, --help  print this help and exit

  -P OUTDIR   generate images for a puzzle. Expected input is of the form
              produced by sudokugen. At conclusion, OUTDIR will contain:

                - new.png       the unsolved board
                - solved.png    the completed board
                - penciled.png  the unsolved board with pencil marks applied
                - meta.txt      any additional metadata, like the difficulty

  --          indicates the end of options for `basename $0`; any remaining 
              arguments will be passed to sudoku2tex

Input is taken from STDIN.
EOF
}
while [[ "$1" ]]; do
    case "$1" in
        -h|--help)
            usage
            exit 0
            ;;
        -P)
            shift
            outd="$1"
            problem=1
            if ! [[ "$outd" ]]; then
                usage
                exit 1
            fi
            ;;
        --) break ;;
        ,*)
            echo $1
            usage
            exit 1
            ;;
    esac
    shift
done

tmpfile=`mktemp`
cat > $tmpfile
err=0

if [[ "$problem" ]]; then
    convert_puzzle $tmpfile $outd "$@"
elif grep -q difficulty $tmpfile; then
    echo 'sudokugen output detected; re-run with -P option.' >&2
    err=1
else
    <$tmpfile convert_board "$@"
fi

rm -f $tmpfile
exit $err
