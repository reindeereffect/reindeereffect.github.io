#! /usr/bin/env python3
'''
Usage: %s [OPTIONS] [HIGHLIGHT]...
Given a Sudoku board, generate Latex source code.

Options:
                x
  -h, --help    print this help and exit

  -p            print pencil marks for all unknown cells

Cells are numbered sequentially from 0 in row-major order. Each HIGHLIGHT 
indicates a cell whose value (or pencil marks) will have its value surrounded
by a red box; HIGHLIGHTs and any cell sharing a possible value with a HIGHLIGHT
will have their possibilities set in red. In the absence of the -p option, only
cells sharing a division with a HIGHLIGHT will be pencil marked.

Used separately, the code generated by this program requires the sudokuii Latex 
package, included in the source repository (as latex/sudokuii.sty).
'''
import getopt
import sys
import sudoku as sd
def sudoku_env(bd, pencil_marks, special):
    ncells = len(bd.known) + len(bd.unknown)
    order = int(ncells**0.25)
    n = order**2
    cells = [str(bd.known.get(i, ' ')) for i in range(ncells)]

    if pencil_marks: apply_pencils(bd, cells, order)

    reds = set()
    redboxes = set()

    for cell in special:
        dr, drb = highlight(cell, bd, cells, order)
        reds |= dr
        redboxes |= drb

    cells_fmtd = fmt_cells(cells, bd, reds, redboxes)
    grid = form_body(cells_fmtd, n)
    sudokusize = n/9 * (17 if pencil_marks or redboxes else 12)
    unitlength = sudokusize / n
    fboxsep = {2: 2, 3: 7, 4: 9}.get(order, 9) / 4 / n

    return f'''
    \\setlength\\sudokusize{{{sudokusize}cm}}
    \\setlength\\unitlength{{{1/n}\\sudokusize}}
    \\setlength\\fboxsep{{-{fboxsep}\\unitlength}}
    \\renewcommand\\sudokuformat[1]{{\\Huge\\sffamily#1}}

    \\begin{{sudoku}}[{order}]
    {grid}
    \\end{{sudoku}}
    '''

def form_body(cells, n):
    rows = [cells[i*n : (i + 1) * n] for i in range(n)]
    lines = ['|%s|.' % '|'.join(row) for row in rows]
    return '\n'.join(lines)

def pencils(possible, order):
    vals = [str(val) if val in possible else '.'
            for val in range(1, 1 + order**2)]
    coldesc = 'c' + 'c' * order
    grid = ' \\\\\n'.join(' & '.join(map(str, ['\\ \\ ']
                                         + vals[order*i : order*(i + 1)]))
                          for i in range(order))

    return f'''
    \\resizebox{{\\unitlength}}{{.6\\unitlength}}{{
    \\begin{{tabular}}{{{coldesc}}}
    \\ \\\\
    {grid} \\\\
    \\ \\\\
    \\end{{tabular}}
    }}
    '''

def apply_pencils(bd, cells, order):
    for (unk, vals) in bd.unknown.items():
        cells[unk] = pencils(vals, order)
def highlight(cell0, bd, cells, order):
    reds = set()
    redboxes = {cell0}

    for div in bd.cell2divs[cell0]:
        for cell in bd.div2cells[div] - set(bd.known):
            cells[cell] = pencils(bd.unknown[cell], order)
            if bd.unknown[cell0] & bd.unknown[cell]:
                reds.add(cell)
    return reds, redboxes
def fmt_cells(cells, bd, reds, redboxes):
    red = lambda s: '{\\color{red}%s}' % s
    redboxed = lambda s: '{\\color{red}\\fbox{%s}}' % s
    black = lambda s: '{\\color{black}%s}' % s

    return [redboxed(cell) if i in redboxes
            else red(cell) if i in reds
            else black(cell)
            for (i, cell) in enumerate(cells)]
def main(argv):
    try:
        opts_, args = getopt.gnu_getopt(argv, 'hp')
        special = {int(cell) for cell in args}
    except getopt.GetoptError: sys.exit(usage())
    except ValueError: sys.exit(usage())

    opts = dict(opts_)
    pencil_marks = '-p' in opts

    try:
        bd = sd.load_board(sys.stdin.read(), validate_vals=False)
    except ValueError:
        sys.exit('ill-formed board')

    not_special = set(special) & set(bd.known)
    if not_special:
        print("Won't hightlight known cells", not_special, file=sys.stderr)
        exit(1)

    print(sudoku_env(bd, pencil_marks, special))
import sys

def usage():
    return __doc__.lstrip() % sys.argv[0]

if __name__ == '__main__':
    if set(sys.argv) & {'-h', '--help'}:
        sys.exit(usage())
    else:
        main(sys.argv[1:])
